criterias = """Критерии:
1. Соответствие теме.

Данный критерий нацеливает на проверку содержания сочинения.
Участник должен рассуждать на предложенную тему, выбрав путь ее раскрытия
(например, отвечает на вопрос, поставленный в теме, или размышляет над предложенной
проблемой и т.п.).
«Незачет» ставится только в случае, если сочинение не соответствует теме, в нем нет
ответа на вопрос, поставленный в теме, или в сочинении не прослеживается конкретной цели
высказывания. Во всех остальных случаях выставляется «зачет».

2. Аргументация. Привлечение литературного материала.

Данный критерий нацеливает на проверку умения строить рассуждение, доказывать
свою позицию, формулируя аргументы и подкрепляя их примерами из опубликованных
литературных произведений. Можно привлекать произведения устного народного творчества
(за исключением малых жанров), художественную, документальную, мемуарную,
публицистическую, научную и научно-популярную литературу (в том числе философскую,
психологическую, литературоведческую, искусствоведческую), дневники, очерки,
литературную критику и другие произведения отечественной и мировой литературы
(достаточно опоры на один текст).
«Незачет» ставится при условии, если сочинение не содержит аргументации, написано
без опоры на литературный материал, или в нем существенно искажено содержание
выбранного текста, или литературный материал лишь упоминается в работе (аргументы
примерами не подкрепляются). Во всех остальных случаях выставляется «зачет».

3. Композиция и логика рассуждения.

Данный критерий нацеливает на проверку умения логично выстраивать рассуждение
на предложенную тему. Участник должен выдерживать соотношение между тезисом и
доказательствами.
«Незачет» ставится при условии, если грубые логические нарушения мешают
пониманию смысла сказанного или отсутствует тезисно-доказательная часть. Во всех
остальных случаях выставляется «зачет».

4. Качество письменной речи.

Данный критерий нацеливает на проверку речевого оформления текста сочинения.
Участник должен точно выражать мысли, используя разнообразную лексику и
различные грамматические конструкции, при необходимости уместно употреблять термины.
«Незачет» ставится при условии, если низкое качество речи (в том числе речевые
ошибки) существенно затрудняет понимание смысла сочинения. Во всех остальных случаях
выставляется «зачет».

5. Грамотность

Данный критерий позволяет оценить грамотность выпускника.
«Незачет» ставится при условии, если на 100 слов в среднем приходится в сумме более
пяти ошибок: грамматических, орфографических, пунктуационных.

Для получения «зачета» за итоговое сочинение необходимо
получить «зачет» по критериям № 1 и № 2, а также дополнительно «зачет» по одному из критериев № 3 или № 4. На оценку сочинения по Критерию № 5 распространяются положения о негрубых, повторяющихся и
однотипных ошибках. При подсчете ошибок негрубые ошибки не учитываются."""

prompt_correct = """
Исправь данного сочинения или добавь к нему что-то, что может исправить недочеты или усилить его по критерям и требованиям.
При этом, оставь основную суть сочинения. Выдели измененную или добавленную часть следующим образом: :rainbow-background[измененная или добавленная часть текста]

Требования:
1. Объем итогового сочинения.

Рекомендуемое количество слов – от 350.
Максимальное количество слов в сочинении не устанавливается. Если в сочинении
менее 250 слов (в подсчет включаются все слова, в том числе служебные), то выставляется
«незачет» за невыполнение требования № 1 и «незачет» за работу в целом (такое итоговое
сочинение не проверяется по требованию № 2 «Самостоятельность написания итогового
сочинения» и критериям оценивания).

2. Самостоятельность написания итогового сочинения.

Итоговое сочинение выполняется самостоятельно. Не допускается списывание
сочинения (фрагментов сочинения) из какого-либо источника или воспроизведение по
памяти чужого текста (работа другого участника, текст, опубликованный в бумажном и (или)
электронном виде, и др.).
Допускается прямое или косвенное цитирование с обязательной ссылкой на источник
(ссылка дается в свободной форме). Объем цитирования не должен превышать объем
собственного текста участника итогового сочинения.
Если сочинение признано несамостоятельным, то выставляется «незачет» за
невыполнение требования № 2 и «незачет» за работу в целом (такое сочинение не проверяется
по критериям оценивания).
Итоговое сочинение, соответствующее установленным требованиям, оценивается по
критериям:
1. «Соответствие теме»;
2. «Аргументация. Привлечение литературного материала»;
3. «Композиция и логика рассуждения»;
4. «Качество письменной речи»;
5. «Грамотность».

""" + criterias + """

Тема: {0}

Текст сочинения: {1}
"""

prompt_estimate = """
Твоя задача - оценить и проанализировать сочинение ученика на заданную тему по определенным критериям.
Также проверь текст на требования, если они не будут выполнены - автоматические ставиться незачет.
Предоставь подробный отзыв с указанием сильных и слабых сторон данного сочинения, а также советы для его улучшения (если такие имеются).

Требования:
1. Объем итогового сочинения.

Рекомендуемое количество слов – от 350.
Максимальное количество слов в сочинении не устанавливается. Если в сочинении
менее 250 слов (в подсчет включаются все слова, в том числе служебные), то выставляется
«незачет» за невыполнение требования № 1 и «незачет» за работу в целом (такое итоговое
сочинение не проверяется по требованию № 2 «Самостоятельность написания итогового
сочинения» и критериям оценивания).

2. Самостоятельность написания итогового сочинения.

Итоговое сочинение выполняется самостоятельно. Не допускается списывание
сочинения (фрагментов сочинения) из какого-либо источника или воспроизведение по
памяти чужого текста (работа другого участника, текст, опубликованный в бумажном и (или)
электронном виде, и др.).
Допускается прямое или косвенное цитирование с обязательной ссылкой на источник
(ссылка дается в свободной форме). Объем цитирования не должен превышать объем
собственного текста участника итогового сочинения.
Если сочинение признано несамостоятельным, то выставляется «незачет» за
невыполнение требования № 2 и «незачет» за работу в целом (такое сочинение не проверяется
по критериям оценивания).
Итоговое сочинение, соответствующее установленным требованиям, оценивается по
критериям:
1. «Соответствие теме»;
2. «Аргументация. Привлечение литературного материала»;
3. «Композиция и логика рассуждения»;
4. «Качество письменной речи»;
5. «Грамотность».

""" + criterias + """

Тема: {0}

Текст сочинения: {1}
"""

prompt_area = """
Выдели участки текста определенным цветом, где соблюден соответствующий критерий, если данный критерий
нигде в течении текста не будет выполнен, то данный цвет выделения критерия можно пропустить.
Если есть необходимость, можешь выделить таких участков несколько, но необязательно. Участком может
являться словосочетание, предложение или несколько предложений. Замени выбранную часть текстом вида -
'<div class="colored color_name">text</div>', где вместо color_name - один из 5 цветов, соответствующий данному критерию,
вместо text вставляешь выбранный участок текста без одинарных кавычек.

Критерии:
1. Соответствие теме.

Данный критерий нацеливает на проверку содержания сочинения.
Участник должен рассуждать на предложенную тему, выбрав путь ее раскрытия
(например, отвечает на вопрос, поставленный в теме, или размышляет над предложенной
проблемой и т.п.).

2. Аргументация. Привлечение литературного материала.

Данный критерий нацеливает на проверку умения строить рассуждение, доказывать
свою позицию, формулируя аргументы и подкрепляя их примерами из опубликованных
литературных произведений. Можно привлекать произведения устного народного творчества
(за исключением малых жанров), художественную, документальную, мемуарную,
публицистическую, научную и научно-популярную литературу (в том числе философскую,
психологическую, литературоведческую, искусствоведческую), дневники, очерки,
литературную критику и другие произведения отечественной и мировой литературы
(достаточно опоры на один текст).

3. Композиция и логика рассуждения.

Данный критерий нацеливает на проверку умения логично выстраивать рассуждение
на предложенную тему. Участник должен выдерживать соотношение между тезисом и
доказательствами.

Выполнение критерия №1 - это цвет 'blue'
Выполнение критерия №2 - это цвет 'green'
Выполнение критерия №3 - это цвет 'red'

Выведи ТОЛЬКО исходный текст сочинения с дополнительной заменой его частей без темы и лишних комментариев.

Тема: {0}

Текст сочинения: {1}

"""

import asyncio, uvicorn, os, httpx

from random import sample
from chromadb import Settings, AsyncHttpClient
from fastapi import FastAPI, Request
from fastapi_sse import sse_handler
from fastapi.middleware.cors import CORSMiddleware

from pydantic import BaseModel
from openai import OpenAI

origins = ["*"]

class message(BaseModel):
    chunk: str | None = None

if len(os.environ['OPENAI_API_KEY']) == 0:
    print('Пожалуйста, укажите в локальных переменных ваш OPENAI_API_KEY')
    exit(1)

OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if len(os.environ['PROXY_SERVER_URL']) != 0:
    client = OpenAI(api_key=OPENAI_API_KEY, http_client=httpx.Client(proxy=os.environ['PROXY_SERVER_URL']))
else:
    client = OpenAI(api_key=OPENAI_API_KEY)

app = FastAPI(
    title='Lingwo API',
    version='1.0',
    contact={
        'name': 'Dmitry',
        'url': 'https://t.me/kaiyofx',
    }
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post('/area')
@sse_handler(emit_type=True)
async def estimated(request : Request):
    response = await request.json()
    theme, text = response['theme'], response['text']
    for i in client.chat.completions.create(
        model="gpt-4o",
        messages=[
            { "role": "system", "content": "Ты - филолог по русского языка со стажем более 50-и лет." },
            { "role": "user", "content": prompt_area.format(theme, text) }],
        stream=True):
        if i.choices[0].delta.content == None:
            yield message(chunk='')
            
        yield message(chunk=i.choices[0].delta.content)

@app.post('/correct')
@sse_handler()
async def estimated(request : Request):
    response = await request.json()
    theme, text = response['theme'], response['text']
    for i in client.chat.completions.create(
        model="gpt-4o",
        messages=[
            { "role": "system", "content": "Ты - филолог по русского языка со стажем более 50-и лет." },
            { "role": "user", "content": prompt_correct.format(theme, text) }],
        stream=True):

        yield message(chunk=(i.choices[0].delta.content or ''))

@app.post('/estimate')
@sse_handler()
async def estimated(request : Request):
    response = await request.json()
    theme, text = response['theme'], response['text']
    for i in client.chat.completions.create(
        model="gpt-4o",
        messages=[
            { "role": "system", "content": "Ты - филолог по русского языка со стажем более 50-и лет." },
            { "role": "user", "content": prompt_estimate.format(theme, text) }],
        stream=True):
        yield message(chunk=i.choices[0].delta.content)
        

@app.post('/generate_themes')
async def generate(request : Request):
    if len(await request.body()) == 0:
        return {'code': 400}
    requestJson = await request.json()
    if('themes' not in requestJson):
        return {'code': 400}
    
    themes = (await request.json())['themes']
    generated_themes = await generate_themes(themes)
    return {'themes': generated_themes, 'code': 0}

async def generate_themes(selects):
    client = await AsyncHttpClient(host='chroma', port=8000, settings=Settings(anonymized_telemetry=False))
    collection = await client.get_or_create_collection(name='themes')
    generated_themes = (await collection.query(query_texts=selects, n_results=60))['documents'][0]
    if len(generated_themes) < 6:
        return ['...']

    return sample(generated_themes, 6)

if __name__ == "__main__":
    server = uvicorn.Server(uvicorn.Config(app, port=4242))
    loop = asyncio.get_event_loop()
    loop.run_until_complete(server.serve())